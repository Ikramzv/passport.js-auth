const router = require("express").Router();
const passport = require("passport");
const { genPassword } = require("../lib/passwordUtils");
const User = require("../db/UserModel");
const { isAuth } = require("../midlewares/authMiddleware");

router.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info, status) => {
    if (err) return next(err);
    if (!user) return res.redirect("/login");
    req.logIn(user, (err) => {
      if (err) return err;
      // Calling res.redirect("/") inside req.logIn(user,doneCb) function is very important
      // because req.logIn function runs req._sessionManager.logIn function which runs the asynchronous req.session.regenerate and req.session.save
      // functions internally.
      // In case we write res.redirect("/") function outside the req.logIn function , the session generated by req.logIn function
      // won't affect to the subsequent requests because of the response has already been sent ( res.redirect("/") )
      // before returning of req.logIn function.
      // This practice was made to comprehend how the passport.js work under the hood
      return res.redirect("/protected");
    });
  })(req, res, next);
});

router.post("/register", async (req, res) => {
  const { salt, hash } = genPassword(req.body.pw);
  const user = new User({ hash, salt, username: req.body.uname, admin: true });
  const savedUser = await user.save();
  req.logIn(savedUser, (err) => {
    if (err) throw err;
    return res.redirect("/protected");
  });
});

router.get("/logout", (req, res) => {
  req.logout((err) => {
    if (err) return res.status(500).json(err);
    return res.clearCookie("connect_session").redirect("/");
  });
});

module.exports = router;
